/**
 * Copyright 2017 Universidad Icesi
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
package co.edu.icesi.driso.matrices

import co.edu.icesi.driso.matrices.classes.Strategy

includes Common

subsystem Compile {

	param Strategy strategy
	
	on compilationHost {	 
		compileCommon:
			cd sources.get(0)
			compile "src" "mcm-common"
			cmd "yes | cp -f mcm-common.jar " + builtFolder + "/"
	}
	
	on compilationHost ? strategy == Strategy.BLOCK_REDUCE {
		strategy1:compileCommon;
			cd sources.get(1)
			compile "src" "mcm-blockreduce" -classpath builtFolder + "/mcm-common.jar"
			cmd "yes | cp -f mcm-blockreduce.jar " + builtFolder
	}
	
	on compilationHost ? strategy == Strategy.HYBRID_MULTIPLICATION {
		strategy2:compileCommon;
			cd sources.get(2)
			compile "src" "mcm-hybrid-multiplication" -classpath builtFolder + "/mcm-common.jar"
			cmd "yes | cp -f mcm-hybrid-multiplication.jar " + builtFolder
	}
	
	on compilationHost ? strategy == Strategy.N_MATRICES {
		strategy3:compileCommon;
			cd sources.get(3)
			compile "src" "mcm-nmatrices" -classpath builtFolder + "/mcm-common.jar"
			cmd "yes | cp -f mcm-nmatrices.jar " + builtFolder
	}
	
	on compilationHost ? strategy == Strategy.STRASSEN {
		strategy4:compileCommon;
			cd sources.get(4)
			compile "src" "mcm-strassen" -classpath builtFolder + "/mcm-common.jar"
			cmd "yes | cp -f mcm-strassen.jar " + builtFolder
	}

}