/**
 * Copyright 2017 Universidad Icesi
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
package co.edu.icesi.driso.amelia.carvajal.xml.large.shared

import java.util.concurrent.atomic.AtomicBoolean
import co.edu.icesi.driso.amelia.carvajal.xml.large.common.classes.CommunicationProtocolEnum

includes co.edu.icesi.driso.amelia.carvajal.xml.large.common.CommonSpecification

depends on co.edu.icesi.driso.amelia.carvajal.xml.large.shared.Compilation

/*
 * This subsystem allows to transport the compiled artifacts to  processing nodes where they will run.
 */
subsystem Transportation
{
	
	//The protocol used for components communication
	param CommunicationProtocolEnum protocol
	
	/*
	 * The element to copy.
	 */
	param String elementName
	
	/*
	 * The destination folder of the element to copy.
	 */
	param String destinationFolder
	
	/*
	 *The name of the folder that contains the transported artifacts. 
	 */
	param String transportedArtifactsFolderName
	
	/*
	 * Indicates whether will be necessary to delete the previously transported artifacts.
	 */
	var AtomicBoolean removeFolder = new AtomicBoolean
	
	on CommonSpecification.host
	{
		init ? protocol == CommunicationProtocolEnum.ICE:
		
			(cmd '[ -d «destinationFolder»/«transportedArtifactsFolderName» ] && echo exists || echo non-existent')
			.fetch[removeFolder.set(it.contains("exists"))]
		
		preConfigure ? removeFolder : init;
		
			cmd 'rm -Rf «destinationFolder»/«transportedArtifactsFolderName»'
		
		copy:preConfigure;
			
			cmd 'cp -rf «elementName» «destinationFolder»'
	}
}